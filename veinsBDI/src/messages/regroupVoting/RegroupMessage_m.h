//
// Generated file, do not edit! Created by nedtool 5.4 from messages/regroupVoting/RegroupMessage.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __REGROUPMESSAGE_M_H
#define __REGROUPMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "../NegotiationMessage_m.h"
typedef std::vector<int> IntVector;
// }}

/**
 * Class generated from <tt>messages/regroupVoting/RegroupMessage.msg:23</tt> by nedtool.
 * <pre>
 * //Used for vehicles to reorganize themselves in new platoons
 * packet RegroupMessage extends NegotiationMessage
 * {
 *     int platoonId;
 *     int leader1;
 *     int leader2;
 *     IntVector platoon1;
 *     IntVector platoon2;
 * }
 * </pre>
 */
class RegroupMessage : public ::NegotiationMessage
{
  protected:
    int platoonId;
    int leader1;
    int leader2;
    IntVector platoon1;
    IntVector platoon2;

  private:
    void copy(const RegroupMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RegroupMessage&);

  public:
    RegroupMessage(const char *name=nullptr, short kind=0);
    RegroupMessage(const RegroupMessage& other);
    virtual ~RegroupMessage();
    RegroupMessage& operator=(const RegroupMessage& other);
    virtual RegroupMessage *dup() const override {return new RegroupMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getPlatoonId() const;
    virtual void setPlatoonId(int platoonId);
    virtual int getLeader1() const;
    virtual void setLeader1(int leader1);
    virtual int getLeader2() const;
    virtual void setLeader2(int leader2);
    virtual IntVector& getPlatoon1();
    virtual const IntVector& getPlatoon1() const {return const_cast<RegroupMessage*>(this)->getPlatoon1();}
    virtual void setPlatoon1(const IntVector& platoon1);
    virtual IntVector& getPlatoon2();
    virtual const IntVector& getPlatoon2() const {return const_cast<RegroupMessage*>(this)->getPlatoon2();}
    virtual void setPlatoon2(const IntVector& platoon2);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const RegroupMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, RegroupMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __REGROUPMESSAGE_M_H

