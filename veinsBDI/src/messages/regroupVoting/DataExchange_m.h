//
// Generated file, do not edit! Created by nedtool 5.4 from messages/regroupVoting/DataExchange.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __DATAEXCHANGE_M_H
#define __DATAEXCHANGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "../NegotiationMessage_m.h"
// }}

/**
 * Class generated from <tt>messages/regroupVoting/DataExchange.msg:20</tt> by nedtool.
 * <pre>
 * //Used to trade vote data, such election results and votes
 * packet DataExchange extends NegotiationMessage
 * {
 *     int platoonId;
 *     int type; //Either VOTE_DATA or ELECTION_RESULT
 *     int data[]; //Array containing votes or election_results
 * }
 * </pre>
 */
class DataExchange : public ::NegotiationMessage
{
  protected:
    int platoonId;
    int type;
    int *data; // array ptr
    unsigned int data_arraysize;

  private:
    void copy(const DataExchange& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const DataExchange&);

  public:
    DataExchange(const char *name=nullptr, short kind=0);
    DataExchange(const DataExchange& other);
    virtual ~DataExchange();
    DataExchange& operator=(const DataExchange& other);
    virtual DataExchange *dup() const override {return new DataExchange(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getPlatoonId() const;
    virtual void setPlatoonId(int platoonId);
    virtual int getType() const;
    virtual void setType(int type);
    virtual void setDataArraySize(unsigned int size);
    virtual unsigned int getDataArraySize() const;
    virtual int getData(unsigned int k) const;
    virtual void setData(unsigned int k, int data);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const DataExchange& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, DataExchange& obj) {obj.parsimUnpack(b);}


#endif // ifndef __DATAEXCHANGE_M_H

