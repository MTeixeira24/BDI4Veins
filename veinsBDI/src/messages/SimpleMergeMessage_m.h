//
// Generated file, do not edit! Created by nedtool 5.4 from messages/SimpleMergeMessage.msg.
//

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#ifndef __SIMPLEMERGEMESSAGE_M_H
#define __SIMPLEMERGEMESSAGE_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0504
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
#include "veins/modules/application/platooning/messages/ManeuverMessage_m.h"
// }}

/**
 * Class generated from <tt>messages/SimpleMergeMessage.msg:24</tt> by nedtool.
 * <pre>
 * packet SimpleMergeMessage extends ManeuverMessage
 * {
 *     // the id of the lane the joiner currently drives on
 *     int currentLaneIndex;
 *     double xPos;
 *     double yPos;
 * }
 * </pre>
 */
class SimpleMergeMessage : public ::ManeuverMessage
{
  protected:
    int currentLaneIndex;
    double xPos;
    double yPos;

  private:
    void copy(const SimpleMergeMessage& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const SimpleMergeMessage&);

  public:
    SimpleMergeMessage(const char *name=nullptr, short kind=0);
    SimpleMergeMessage(const SimpleMergeMessage& other);
    virtual ~SimpleMergeMessage();
    SimpleMergeMessage& operator=(const SimpleMergeMessage& other);
    virtual SimpleMergeMessage *dup() const override {return new SimpleMergeMessage(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getCurrentLaneIndex() const;
    virtual void setCurrentLaneIndex(int currentLaneIndex);
    virtual double getXPos() const;
    virtual void setXPos(double xPos);
    virtual double getYPos() const;
    virtual void setYPos(double yPos);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const SimpleMergeMessage& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, SimpleMergeMessage& obj) {obj.parsimUnpack(b);}


#endif // ifndef __SIMPLEMERGEMESSAGE_M_H

